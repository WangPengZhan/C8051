C51 COMPILER V9.53.0.0   FLASHUTILS                                                        08/06/2020 18:09:15 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE FLASHUTILS
OBJECT MODULE PLACED IN .\src\flashUtils.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe F:\work\ROSA_Pow
                    -er\software\C8051\2020.08.06_c8051\ROSA_POWER_EVK\src\flashUtils.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL
                    -(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v4/developer/sdk
                    -s/8051/v4.1.1//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/C8051F340/
                    -inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//examples/C8051F340DK/USB/USBXpress/C8051F340_USBXpres
                    -s_Echo/src;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Lib/USBXpress) PRINT(.\src\flashUtils.lst) CON
                    -D PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\flashUtils.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          //      Copyright (c) 2017-2018, xy-technology International Co.,Ltd
   3          //-----------------------------------------------------------------------------
   4          //
   5          // file name  :       flashUtils.c
   6          //
   7          // description:       Contains several useful utilities for writing and updating
   8          //
   9          // Target     :       C8051F34x / C8051F38x
  10          //
  11          // version    :       V100.001
  12          //                                        2017/11/16 by roy zhou
  13          //
  14          //-----------------------------------------------------------------------------
  15          
  16          //-----------------------------------------------------------------------------
  17          // Includes
  18          //-----------------------------------------------------------------------------
  19          #include "include.h"
  20          
  21          //-----------------------------------------------------------------------------
  22          // Function Prototypes
  23          //-----------------------------------------------------------------------------
  24          
  25          
  26          //-----------------------------------------------------------------------------
  27          // FLASH_Clear
  28          //-----------------------------------------------------------------------------
  29          //
  30          // Return Value : None
  31          // Parameters   :
  32          //   1) FLADDR addr - address of the byte to write to
  33          //                    valid range is 0x0000 to 0xF9FF for 64K devices
  34          //                    valid range is 0x0000 to 0x7DFF for 32K devices
  35          //                    valid range is 0x0000 to 0x3DFF for 16K devices
  36          //   2) unsigned int numbytes - the number of bytes to clear to 0xFF
  37          //                    valid range is 0 to FLASH_PAGESIZE
  38          //
  39          // This routine erases <numbytes> starting from the FLASH addressed by
  40          // <dest> by performing a read-modify-write operation using <FLASH_TEMP> as
  41          // a temporary holding area.
  42          // <addr> + <numbytes> must be less than 0xF9FF/0x7DFF/0x3DFF.
  43          //
  44          //-----------------------------------------------------------------------------
  45          void    FLASH_Clear (FLADDR dest, uint16_t numbytes)
  46          {
  47   1         FLADDR dest_1_page_start;           // First address in 1st page
  48   1                                             // containing <dest>
  49   1         FLADDR dest_1_page_end;             // Last address in 1st page
  50   1                                             // containing <dest>
C51 COMPILER V9.53.0.0   FLASHUTILS                                                        08/06/2020 18:09:15 PAGE 2   

  51   1         FLADDR dest_2_page_start;           // First address in 2nd page
  52   1                                             // containing <dest>
  53   1         FLADDR dest_2_page_end;             // Last address in 2nd page
  54   1                                             // containing <dest>
  55   1         uint16_t numbytes_remainder;        // When crossing page boundary,
  56   1                                             // number of <src> bytes on 2nd page
  57   1         uint16_t FLASH_pagesize;            // Size of FLASH page to update
  58   1      
  59   1         FLADDR  wptr;                       // Write address
  60   1         FLADDR  rptr;                       // Read address
  61   1      
  62   1         uint16_t length;
  63   1      
  64   1         FLASH_pagesize = FLASH_PAGESIZE;
  65   1      
  66   1         dest_1_page_start = dest & ~(FLASH_pagesize - 1);
  67   1         dest_1_page_end   = dest_1_page_start + FLASH_pagesize - 1;
  68   1         //dest_2_page_start = (dest + numbytes)  & ~(FLASH_pagesize - 1);
  69   1         dest_2_page_start = (dest + numbytes-1) & ~(FLASH_pagesize - 1);
  70   1         dest_2_page_end   = dest_2_page_start + FLASH_pagesize - 1;
  71   1      
  72   1         if (dest_1_page_end == dest_2_page_end)
  73   1         {
  74   2            // 1. Erase Scratch page
  75   2            FLASH_PageErase (FLASH_TEMP);
  76   2      
  77   2            // 2. Copy bytes from first byte of dest page to dest-1 to Scratch page
  78   2            wptr = FLASH_TEMP;
  79   2            rptr = dest_1_page_start;
  80   2            length = dest - dest_1_page_start;
  81   2            FLASH_Copy (wptr, rptr, length);
  82   2      
  83   2            // 3. Copy from (dest+numbytes) to dest_page_end to Scratch page
  84   2            wptr = FLASH_TEMP + dest - dest_1_page_start + numbytes;
  85   2            rptr = dest + numbytes;
  86   2            length = dest_1_page_end - dest - numbytes + 1;
  87   2            FLASH_Copy (wptr, rptr, length);
  88   2      
  89   2            // 4. Erase destination page
  90   2            FLASH_PageErase (dest_1_page_start);
  91   2      
  92   2            // 5. Copy Scratch page to destination page
  93   2            wptr = dest_1_page_start;
  94   2            rptr = FLASH_TEMP;
  95   2            length = FLASH_pagesize;
  96   2            FLASH_Copy (wptr, rptr, length);
  97   2         }
  98   1         else // value crosses page boundary
  99   1         {
 100   2            // 1. Erase Scratch page
 101   2            FLASH_PageErase (FLASH_TEMP);
 102   2      
 103   2            // 2. Copy bytes from first byte of dest page to dest-1 to temp page
 104   2            wptr = FLASH_TEMP;
 105   2            rptr = dest_1_page_start;
 106   2            length = dest - dest_1_page_start;
 107   2            FLASH_Copy (wptr, rptr, length);
 108   2      
 109   2            // 3. Erase destination page 1
 110   2            FLASH_PageErase (dest_1_page_start);
 111   2      
 112   2            // 4. Copy Scratch page to destination page 1
 113   2            wptr = dest_1_page_start;
C51 COMPILER V9.53.0.0   FLASHUTILS                                                        08/06/2020 18:09:15 PAGE 3   

 114   2            rptr = FLASH_TEMP;
 115   2            length = FLASH_pagesize;
 116   2            FLASH_Copy (wptr, rptr, length);
 117   2      
 118   2            // Now handle 2nd page
 119   2      
 120   2            // 5. Erase Scratch page
 121   2            FLASH_PageErase (FLASH_TEMP);
 122   2      
 123   2            // 6. Copy bytes from numbytes remaining to dest-2_page_end to temp page
 124   2            numbytes_remainder = numbytes - (dest_1_page_end - dest + 1);
 125   2            wptr = FLASH_TEMP + numbytes_remainder;
 126   2            rptr = dest_2_page_start + numbytes_remainder;
 127   2            length = FLASH_pagesize - numbytes_remainder;
 128   2            FLASH_Copy (wptr, rptr, length);
 129   2      
 130   2            // 7. Erase destination page 2
 131   2            FLASH_PageErase (dest_2_page_start);
 132   2      
 133   2            // 8. Copy Scratch page to destination page 2
 134   2            wptr = dest_2_page_start;
 135   2            rptr = FLASH_TEMP;
 136   2            length = FLASH_pagesize;
 137   2            FLASH_Copy (wptr, rptr, length);
 138   2         }
 139   1      }
 140          
 141          
 142          //-----------------------------------------------------------------------------
 143          // FLASH_Update
 144          //-----------------------------------------------------------------------------
 145          //
 146          // Return Value : None
 147          // Parameters   :
 148          //   1) FLADDR dest - starting address of the byte(s) to write to
 149          //                    valid range is 0x0000 to 0xFBFF for 64K devices
 150          //                    valid range is 0x0000 to 0x7FFF for 32K devices
 151          //                    valid range is 0x0000 to 0x3FFF for 16K devices
 152          //   2) char *src - pointer to source bytes
 153          //   3) unsigned int numbytes - the number of bytes to update
 154          //                              valid range is 0 to FLASH_PAGESIZE
 155          //
 156          // This routine replaces <numbytes> from <src> to the FLASH addressed by
 157          // <dest>.  This function calls FLASH_Clear() to initialize all <dest> bytes
 158          // to 0xff's prior to copying the bytes from <src> to <dest>.
 159          // <dest> + <numbytes> must be less than 0xFBFF/0x7DFF/0x3FFF.
 160          //
 161          //-----------------------------------------------------------------------------
 162          void    FLASH_Update (FLADDR dest, char *src, uint16_t numbytes)
 163          {
 164   1         // 1. Erase <numbytes> starting from <dest>
 165   1         FLASH_Clear (dest, numbytes);
 166   1      
 167   1         // 2. Write <numbytes> from <src> to <dest>
 168   1         FLASH_Write (dest, src, numbytes);
 169   1      }
 170          
 171          
 172          //-----------------------------------------------------------------------------
 173          // FLASH_Write
 174          //-----------------------------------------------------------------------------
 175          //
 176          // Return Value : None
C51 COMPILER V9.53.0.0   FLASHUTILS                                                        08/06/2020 18:09:15 PAGE 4   

 177          // Parameters   :
 178          //   1) FLADDR dest - starting address of the byte(s) to write to
 179          //                    valid range is 0x0000 to 0xFBFE for 64K Flash devices
 180          //                    valid range is 0x0000 to 0x7FFE for 32K Flash devices
 181          //                    valid range is 0x0000 to 0x3FFE for 16K Flash devices
 182          //   2) char *src - pointer to source bytes
 183          //   3) unsigned int numbytes - the number of bytes to write
 184          //                              valid range is is range of integer
 185          //
 186          // This routine copies <numbytes> from <src> to the linear FLASH address
 187          // <dest>.  The bytes must be erased to 0xFF before writing.
 188          // <dest> + <numbytes> must be less than 0xFBFF/0x7FFF/0x3FFF.
 189          //
 190          //-----------------------------------------------------------------------------
 191          void    FLASH_Write (FLADDR dest, char *src, uint16_t numbytes)
 192          {
 193   1         FLADDR i;
 194   1      
 195   1         for (i = dest; i < dest+numbytes; i++)
 196   1         {
 197   2            FLASH_ByteWrite (i, *src++);
 198   2         }
 199   1      }
 200          
 201          
 202          //-----------------------------------------------------------------------------
 203          // FLASH_Read
 204          //-----------------------------------------------------------------------------
 205          //
 206          // Return Value : None
 207          //   1) char *dest - pointer to destination bytes
 208          // Parameters   :
 209          //   1) char *dest - pointer to destination bytes
 210          //   2) FLADDR src - address of source bytes in Flash
 211          //                   valid range is 0x0000 to 0x7BFF for 64K Flash devices
 212          //                   valid range is 0x0000 to 0x7FFF for 32K Flash devices
 213          //                   valid range is 0x0000 to 0x3FFF for 16K Flash devices
 214          //   3) unsigned int numbytes - the number of bytes to read
 215          //                              valid range is range of integer
 216          //
 217          // This routine copies <numbytes> from the linear FLASH address <src> to
 218          // <dest>.
 219          // <src> + <numbytes> must be less than 0x7BFF/0x7DFF/0x3FFF.
 220          //
 221          //-----------------------------------------------------------------------------
 222          char * FLASH_Read (char *dest, FLADDR src, uint16_t numbytes)
 223          {
 224   1         FLADDR i;
 225   1      
 226   1         for (i = 0; i < numbytes; i++)
 227   1         {
 228   2            *dest++ = FLASH_ByteRead (src+i);
 229   2         }
 230   1      
 231   1         return dest;
 232   1      }
 233          
 234          //-----------------------------------------------------------------------------
 235          // FLASH_Copy
 236          //-----------------------------------------------------------------------------
 237          //
 238          // Return Value : None
 239          // Parameters   :
C51 COMPILER V9.53.0.0   FLASHUTILS                                                        08/06/2020 18:09:15 PAGE 5   

 240          //   1) FLADDR dest - pointer to destination bytes in Flash
 241          //                   valid range is 0x0000 to 0xFBFF for 64K Flash devices
 242          //                   valid range is 0x0000 to 0x7FFF for 32K Flash devices
 243          //                   valid range is 0x0000 to 0x3FFF for 16K Flash devices
 244          //   2) FLADDR src - address of source bytes in Flash
 245          //                   valid range is 0x0000 to 0xFBFF for 64K Flash devices
 246          //                   valid range is 0x0000 to 0x7FFF for 32K Flash devices
 247          //                   valid range is 0x0000 to 0x3FFF for 16K Flash devices
 248          //   3) unsigned int numbytes - the number of bytes to copy
 249          //                              valid range is range of integer
 250          //
 251          // This routine copies <numbytes> from <src> to the linear FLASH address
 252          // <dest>.  The destination bytes must be erased to 0xFF before writing.
 253          // <src>/<dest> + <numbytes> must be less than 0xFBFF/0x7FFF/0x3FFF.
 254          //
 255          //-----------------------------------------------------------------------------
 256          void    FLASH_Copy (FLADDR dest, FLADDR src, uint16_t numbytes)
 257          {
 258   1         FLADDR i;
 259   1      
 260   1         for (i = 0; i < numbytes; i++)
 261   1         {
 262   2            FLASH_ByteWrite ((FLADDR) dest+i, FLASH_ByteRead((FLADDR) src+i));
 263   2         }
 264   1      }
 265          
 266          //-----------------------------------------------------------------------------
 267          // FLASH_Fill
 268          //-----------------------------------------------------------------------------
 269          //
 270          // Return Value : None
 271          // Parameters   :
 272          //   1) FLADDR addr - starting address of bytes to fill in Flash
 273          //                   valid range is 0x0000 to 0xFBFF for 64K Flash devices
 274          //                   valid range is 0x0000 to 0x7FFF for 32K Flash devices
 275          //                   valid range is 0x0000 to 0x3FFF for 16K Flash devices
 276          //   2) ULONG length - number of bytes to fill
 277          //                     range is total Flash size
 278          //   3) UCHAR fill - the character used the Flash should be filled with
 279          //
 280          // This routine fills the FLASH beginning at <addr> with <length> bytes.
 281          // The target bytes must be erased before writing to them.
 282          // <addr> + <length> must be less than 0xFBFF/0x7DFF/0x3FFF.
 283          //
 284          //-----------------------------------------------------------------------------
 285          void    FLASH_Fill (FLADDR addr, uint32_t length, uint8_t fill)
 286          {
 287   1         FLADDR i;
 288   1      
 289   1         for (i = 0; i < length; i++)
 290   1         {
 291   2            FLASH_ByteWrite (addr+i, fill);
 292   2         }
 293   1      }
 294          
 295          //-----------------------------------------------------------------------------
 296          // End Of File
 297          //-----------------------------------------------------------------------------


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    672    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.53.0.0   FLASHUTILS                                                        08/06/2020 18:09:15 PAGE 6   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      60
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
